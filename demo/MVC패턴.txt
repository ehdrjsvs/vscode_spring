Spring을 통한 MVC패턴 적용하기

1. 컨트롤계층
 1. @Controller
 :jsp페이지 처리할때?(정적페이지와같이 -html,js,cdd) 원시적인방법.
 :jstl사용할때 - 2015까지

 2. @RestController
 :Json 형식으로 페이지 처리가 가능한 모든 뷰라이브러리(솔루션..)
 :화면과 로직의 완전한 불리
 :Front-End 와 Back-End -> 완전한독립 -> 결합도 낮다 -> 얼마든지 다른 화면 솔루션 or 라이브러리 활용가능
->UI부분을얼마든지 다르솔루션이나 다른 라이브러리 선택될수있다.
->Back-End에 대한 수정이 거의 없이 UI변경이 가능한 프로젝트,설계,제품선택
:왜 @ReponseBody가 존재하는데 불구하고 굳이  @RestController또 지원하게 된걸까?

나아갈방향
-> UI/UX 솔루션이 변경되었을때도 현재 Back-End 설계가 그대로 사용될 수 있도록 해 본다
->구조적인 문제에 대해 깊은 고민이 필요하다
->내가 설계한 구조가 유연한가? 
UI/UX솔루션:스크립트기반(저렴하다),XML기반(고가),javascript기반,reactjs,vuejs

 2.서비스계층
 -@Service

 3.퍼시스턴스계층
 1.@Service
 2.@Repository